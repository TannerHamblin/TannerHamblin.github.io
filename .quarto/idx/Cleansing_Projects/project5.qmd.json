{"title":"Client Report - [Insert Project Title]","markdown":{"yaml":{"title":"Client Report - [Insert Project Title]","subtitle":"Course DS 250","author":"[Tanner Hamblin]","format":{"html":{"self-contained":true,"page-layout":"full","title-block-banner":true,"toc":true,"toc-depth":3,"toc-location":"body","number-sections":false,"html-math-method":"katex","code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"execute":{"warning":false}},"headingText":"add the additional libraries you need to import for ML here","containsRefs":false,"markdown":"\n\n\n```{python}\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\nLoad data set \n\n```{python}\n\ndf = pd.read_csv(\"StarWars.csv\", encoding='cp1252')\n\ndf.head()\n\n```\n\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\n_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\nThe machine learning shows that this data using star wars to predict customers salary is not very effective. only predicting each respondants income with 67% accuracy it is only a little more accurate than a coin flip. \n\n## Renaming Columns\n\nWe shortened and standardized all column names at once using direct assignment for clarity and ease of use.\n\n```{python}\n# Show original columns (uncomment to check)\n# df.columns.tolist()\n```\n\nRename all columns\n\n```{python}\ndf.columns = [\n    'ID',\n    'Seen_Any',\n    'Is_Fan',\n    'Seen_Ep1',\n    'Seen_Ep2',\n    'Seen_Ep3',\n    'Seen_Ep4',\n    'Seen_Ep5',\n    'Seen_Ep6',\n    'Rank_Ep1',\n    'Rank_Ep2',\n    'Rank_Ep3',\n    'Rank_Ep4',\n    'Rank_Ep5',\n    'Rank_Ep6',\n    'Fav_Han_Solo',\n    'Fav_Luke_Skywalker',\n    'Fav_Princess_Leia',\n    'Fav_Anakin_Skywalker',\n    'Fav_Obi_Wan_Kenobi',\n    'Fav_Epmeror_Palpatine',\n    'Fav_Darth_Vader',\n    'Fav_Lando_Calrissian',\n    'Fav_Boba_Fett',\n    'Fav_C_3PO',\n    'Fav_R2_D2',\n    'Fav_Jar_Jar_Binks',\n    'Fav_Padme_Amidala',\n    'Fav_Yoda',\n    'Shot_First',\n    'Fam_Expanded_Universe',\n    'Fan_Expanded_Universe',\n    'Star_Trek',\n    'Gender',\n    'Age',\n    'Income',\n    'Education',\n    'Location'\n]\n\ndf.drop(\"ID\", axis=1, inplace = True)\ndf.drop(0, axis=0, inplace=True)\n\n\n\n```\n\n\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\nChanged all data types to either bool or int. this way I can use it in the machine learning.\n\n```{python}\nseen = df.query(\"Seen_Any == 'Yes'\")\ngraph = seen.copy()\nseen.head()\n\nseen.Age.value_counts(dropna=False)\n\n\nconditions = [\n  seen[\"Age\"] == \"18-29\",\n  seen[\"Age\"] == \"30-44\",\n  seen[\"Age\"] == \"45-60\",\n  seen[\"Age\"] == \"> 60\",\n\n]\n\nchoices = [\n  1,2,3,4\n]\n\nseen[\"Age\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nseen.Age.value_counts(dropna=False)\n\n\n\nconditions = [\n  seen[\"Education\"] == \"Less than high school degree\",\n  seen[\"Education\"] == \"High school degree\",\n  seen[\"Education\"] == \"Some college or Associate degree\",\n  seen[\"Education\"] == \"Bachelor degree\",\n  seen[\"Education\"] == \"Graduate degree\",\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Education\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nconditions = [\n  seen[\"Income\"] == \"$0 - $24,999\",\n  seen[\"Income\"] == \"$25,000 - $49,999\",\n  seen[\"Income\"] == \"$50,000 - $99,999\",\n  seen[\"Income\"] == \"$100,000 - $149,999\",\n  seen[\"Income\"] == \"$150,000+\",\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Income\"] = np.select(conditions,choices,default=np.nan)\nseen = seen.dropna(subset=[\"Income\"])\n\nseen.Income.value_counts(dropna=False)\n\ny = seen[\"Income\"]\n\n\n\ny.value_counts(dropna=False)\ny.head()\n\n\nseen[\"Seen_Ep1\"].replace({\"Star Wars: Episode I  The Phantom Menace\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep2\"].replace({\"Star Wars: Episode II  Attack of the Clones\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep3\"].replace({\"Star Wars: Episode III  Revenge of the Sith\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep4\"].replace({\"Star Wars: Episode IV  A New Hope\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep5\"].replace({\"Star Wars: Episode V The Empire Strikes Back\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep6\"].replace({\"Star Wars: Episode VI Return of the Jedi\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Rank_Ep1\"] = seen[\"Rank_Ep1\"].astype(float)\nseen[\"Rank_Ep2\"] = seen[\"Rank_Ep2\"].astype(float)\nseen[\"Rank_Ep3\"] = seen[\"Rank_Ep3\"].astype(float)\nseen[\"Rank_Ep4\"] = seen[\"Rank_Ep4\"].astype(float)\nseen[\"Rank_Ep5\"] = seen[\"Rank_Ep5\"].astype(float)\nseen[\"Rank_Ep6\"] = seen[\"Rank_Ep6\"].astype(float)\n\nseen.dropna(subset=[\"Rank_Ep1\", \"Rank_Ep2\", \"Rank_Ep3\", \"Rank_Ep4\", \"Rank_Ep5\", \"Rank_Ep6\"], inplace = True)\n\nseen.dropna(subset=[\"Location\"], inplace = True)\ndef assing_favorability(seen, column):\n\n\n  conditions = [\n    seen[column] == \"Very unfavorably\",\n    seen[column] == \"Somewhat unfavorably\",\n    seen[column] == \"Neither favorably nor unfavorably (neutral)\",\n    seen[column] == \"Somewhat favorably\",\n    seen[column] == \"Very favorably\",\n  ]\n  choices = [\n    1,2,3,4,5\n  ]\n  seen[column] = np.select(conditions, choices, np.nan)\n  return seen\n\n\n\nseen = assing_favorability(seen, \"Fav_Han_Solo\")\nseen = assing_favorability(seen, \"Fav_Luke_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Princess_Leia\")\nseen = assing_favorability(seen, \"Fav_Anakin_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Obi_Wan_Kenobi\")\nseen = assing_favorability(seen, \"Fav_Epmeror_Palpatine\")\nseen = assing_favorability(seen, \"Fav_Darth_Vader\")\nseen = assing_favorability(seen, \"Fav_Lando_Calrissian\")\nseen = assing_favorability(seen, \"Fav_Boba_Fett\")\nseen = assing_favorability(seen, \"Fav_C_3PO\")\nseen = assing_favorability(seen, \"Fav_R2_D2\")\nseen = assing_favorability(seen, \"Fav_Jar_Jar_Binks\")\nseen = assing_favorability(seen, \"Fav_Padme_Amidala\")\nseen = assing_favorability(seen, \"Fav_Yoda\")\n\n\n\n\ndisplay(seen[\"Fam_Expanded_Universe\"].value_counts(dropna=False))\n\nEncoded = pd.get_dummies(seen, columns= [\n  \"Shot_First\"\n])\n\nconditions = [\n  seen[\"Fav_Han_Solo\"] == \"Very unfavorably\",\n\n\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nEncoded = Encoded.assign(\n  \n)\n\ndef convert_YN(df,column):\n  conditions = [\n    df[column] == \"Yes\", \n    df[column] == \"No\",\n  ]\n\n  choices = [\n    1,0\n  ]\n\n  df[column] = np.select(conditions,choices, np.nan)\n  return df\n\n\nEncoded = convert_YN(Encoded, \"Fam_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Fan_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Star_Trek\")\nEncoded = convert_YN(Encoded, \"Seen_Any\")\nEncoded = convert_YN(Encoded, \"Is_Fan\")\nEncoded[\"Gender\"] = np.where(\nEncoded['Gender'] == \"Male\", 1, 0\n)\n\n\nEncoded.Location.value_counts(dropna = False)\nEncoded = pd.get_dummies(data = Encoded, columns=[\"Location\"])\n\ndf.head()\n\n\n\n```\n\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\nThe majority of respondants thought the Empire Strikes back was the best star wars movie.\n\n```{python}\n\nfrom lets_plot import *\nLetsPlot.setup_html()\n\n\nimport pandas as pd\n\nsummary = pd.DataFrame({\n    'Episode': [\n        'The Phantom Menace',\n        'Attack of the Clones',\n        'Revenge of the Sith',\n        'A New Hope',\n        'Empire Strikes Back',\n        'Return of the Jedi'\n    ],\n    'percentage': [10, 4, 6, 27, 36, 17]\n})\n\nfrom pandas.api.types import CategoricalDtype\nepisode_order = [\n    'The Phantom Menace',\n    'Attack of the Clones',\n    'Revenge of the Sith',\n    'A New Hope',\n    'Empire Strikes Back',\n    'Return of the Jedi'\n]\nsummary['Episode'] = summary['Episode'].astype(\n    CategoricalDtype(categories=episode_order, ordered=True)\n)\n\np = (\n    ggplot(summary, aes(x='Episode', y='percentage')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    coord_flip() +\n    geom_text(\n        aes(label=summary['percentage'].astype(str) + '%'),\n        ha='left',\n        nudge_y=1.5,\n        size=10\n    ) +\n    labs(\n        title=\"What's the Best ‘Star Wars’ Movie?\",\n        subtitle=\"Of 471 respondents who have seen all six films\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_text(size=12),\n        plot_title=element_text(size=16),\n        plot_subtitle=element_text(size=12),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n```\n\nMost people think that han solo shot first. Also a good amout of respondants were not sure what the question meant.\n\n```{python}\n\nfrom lets_plot import *\nimport pandas as pd\nfrom pandas.api.types import CategoricalDtype\n\nLetsPlot.setup_html()\n\nshot_cols = [\n    'Shot_First_Han',\n    'Shot_First_Greedo',\n    \"Shot_First_I don't understand this question\"\n]\n\n\nsummary = Encoded[shot_cols].sum().reset_index()\nsummary.columns = ['ResponseCode', 'Count']\n\n\ntotal_respondents = Encoded[shot_cols].any(axis=1).sum()\n\nsummary['Percent'] = round(summary['Count'] / total_respondents * 100, 0)\n\n\nsummary['PercentLabel'] = summary['Percent'].astype(int).astype(str) + '%'\n\n\nresponse_labels = {\n    'Shot_First_Han': 'Han',\n    'Shot_First_Greedo': 'Greedo',\n    \"Shot_First_I don't understand this question\": \"I don't understand\\n this question\"\n}\n\nsummary['Response'] = summary['ResponseCode'].map(response_labels)\n\ndesired_order = [\n    \"I don't understand\\n this question\",\n    'Greedo',\n    'Han'\n]\n\nresponse_cat_type = CategoricalDtype(categories=desired_order, ordered=True)\nsummary['Response'] = summary['Response'].astype(response_cat_type)\n\np = (\n    ggplot(summary, aes(y='Response', x='Percent')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    geom_text(\n        aes(label='PercentLabel'),\n        ha='left',\n        nudge_x=1.5,\n        size=9\n    ) +\n    labs(\n        title=\"Who Shot First?\",\n        subtitle=f\"According to {total_respondents} respondents\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_blank(),\n        axis_title_x=element_blank(),\n        axis_title_y=element_blank(),\n        axis_ticks=element_blank(),\n        plot_title=element_text(size=18),\n        plot_subtitle=element_text(size=13),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n\n\n```\n\n\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\nBased on the data in the table this learning model can predict respondants income with 67% accuracy\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n\n\n\n\n\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n\n","srcMarkdownNoYaml":"\n\n\n```{python}\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n# add the additional libraries you need to import for ML here\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\nLoad data set \n\n```{python}\n\ndf = pd.read_csv(\"StarWars.csv\", encoding='cp1252')\n\ndf.head()\n\n```\n\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\n_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\nThe machine learning shows that this data using star wars to predict customers salary is not very effective. only predicting each respondants income with 67% accuracy it is only a little more accurate than a coin flip. \n\n## Renaming Columns\n\nWe shortened and standardized all column names at once using direct assignment for clarity and ease of use.\n\n```{python}\n# Show original columns (uncomment to check)\n# df.columns.tolist()\n```\n\nRename all columns\n\n```{python}\ndf.columns = [\n    'ID',\n    'Seen_Any',\n    'Is_Fan',\n    'Seen_Ep1',\n    'Seen_Ep2',\n    'Seen_Ep3',\n    'Seen_Ep4',\n    'Seen_Ep5',\n    'Seen_Ep6',\n    'Rank_Ep1',\n    'Rank_Ep2',\n    'Rank_Ep3',\n    'Rank_Ep4',\n    'Rank_Ep5',\n    'Rank_Ep6',\n    'Fav_Han_Solo',\n    'Fav_Luke_Skywalker',\n    'Fav_Princess_Leia',\n    'Fav_Anakin_Skywalker',\n    'Fav_Obi_Wan_Kenobi',\n    'Fav_Epmeror_Palpatine',\n    'Fav_Darth_Vader',\n    'Fav_Lando_Calrissian',\n    'Fav_Boba_Fett',\n    'Fav_C_3PO',\n    'Fav_R2_D2',\n    'Fav_Jar_Jar_Binks',\n    'Fav_Padme_Amidala',\n    'Fav_Yoda',\n    'Shot_First',\n    'Fam_Expanded_Universe',\n    'Fan_Expanded_Universe',\n    'Star_Trek',\n    'Gender',\n    'Age',\n    'Income',\n    'Education',\n    'Location'\n]\n\ndf.drop(\"ID\", axis=1, inplace = True)\ndf.drop(0, axis=0, inplace=True)\n\n\n\n```\n\n\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\nChanged all data types to either bool or int. this way I can use it in the machine learning.\n\n```{python}\nseen = df.query(\"Seen_Any == 'Yes'\")\ngraph = seen.copy()\nseen.head()\n\nseen.Age.value_counts(dropna=False)\n\n\nconditions = [\n  seen[\"Age\"] == \"18-29\",\n  seen[\"Age\"] == \"30-44\",\n  seen[\"Age\"] == \"45-60\",\n  seen[\"Age\"] == \"> 60\",\n\n]\n\nchoices = [\n  1,2,3,4\n]\n\nseen[\"Age\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nseen.Age.value_counts(dropna=False)\n\n\n\nconditions = [\n  seen[\"Education\"] == \"Less than high school degree\",\n  seen[\"Education\"] == \"High school degree\",\n  seen[\"Education\"] == \"Some college or Associate degree\",\n  seen[\"Education\"] == \"Bachelor degree\",\n  seen[\"Education\"] == \"Graduate degree\",\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Education\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nconditions = [\n  seen[\"Income\"] == \"$0 - $24,999\",\n  seen[\"Income\"] == \"$25,000 - $49,999\",\n  seen[\"Income\"] == \"$50,000 - $99,999\",\n  seen[\"Income\"] == \"$100,000 - $149,999\",\n  seen[\"Income\"] == \"$150,000+\",\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Income\"] = np.select(conditions,choices,default=np.nan)\nseen = seen.dropna(subset=[\"Income\"])\n\nseen.Income.value_counts(dropna=False)\n\ny = seen[\"Income\"]\n\n\n\ny.value_counts(dropna=False)\ny.head()\n\n\nseen[\"Seen_Ep1\"].replace({\"Star Wars: Episode I  The Phantom Menace\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep2\"].replace({\"Star Wars: Episode II  Attack of the Clones\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep3\"].replace({\"Star Wars: Episode III  Revenge of the Sith\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep4\"].replace({\"Star Wars: Episode IV  A New Hope\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep5\"].replace({\"Star Wars: Episode V The Empire Strikes Back\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep6\"].replace({\"Star Wars: Episode VI Return of the Jedi\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Rank_Ep1\"] = seen[\"Rank_Ep1\"].astype(float)\nseen[\"Rank_Ep2\"] = seen[\"Rank_Ep2\"].astype(float)\nseen[\"Rank_Ep3\"] = seen[\"Rank_Ep3\"].astype(float)\nseen[\"Rank_Ep4\"] = seen[\"Rank_Ep4\"].astype(float)\nseen[\"Rank_Ep5\"] = seen[\"Rank_Ep5\"].astype(float)\nseen[\"Rank_Ep6\"] = seen[\"Rank_Ep6\"].astype(float)\n\nseen.dropna(subset=[\"Rank_Ep1\", \"Rank_Ep2\", \"Rank_Ep3\", \"Rank_Ep4\", \"Rank_Ep5\", \"Rank_Ep6\"], inplace = True)\n\nseen.dropna(subset=[\"Location\"], inplace = True)\ndef assing_favorability(seen, column):\n\n\n  conditions = [\n    seen[column] == \"Very unfavorably\",\n    seen[column] == \"Somewhat unfavorably\",\n    seen[column] == \"Neither favorably nor unfavorably (neutral)\",\n    seen[column] == \"Somewhat favorably\",\n    seen[column] == \"Very favorably\",\n  ]\n  choices = [\n    1,2,3,4,5\n  ]\n  seen[column] = np.select(conditions, choices, np.nan)\n  return seen\n\n\n\nseen = assing_favorability(seen, \"Fav_Han_Solo\")\nseen = assing_favorability(seen, \"Fav_Luke_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Princess_Leia\")\nseen = assing_favorability(seen, \"Fav_Anakin_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Obi_Wan_Kenobi\")\nseen = assing_favorability(seen, \"Fav_Epmeror_Palpatine\")\nseen = assing_favorability(seen, \"Fav_Darth_Vader\")\nseen = assing_favorability(seen, \"Fav_Lando_Calrissian\")\nseen = assing_favorability(seen, \"Fav_Boba_Fett\")\nseen = assing_favorability(seen, \"Fav_C_3PO\")\nseen = assing_favorability(seen, \"Fav_R2_D2\")\nseen = assing_favorability(seen, \"Fav_Jar_Jar_Binks\")\nseen = assing_favorability(seen, \"Fav_Padme_Amidala\")\nseen = assing_favorability(seen, \"Fav_Yoda\")\n\n\n\n\ndisplay(seen[\"Fam_Expanded_Universe\"].value_counts(dropna=False))\n\nEncoded = pd.get_dummies(seen, columns= [\n  \"Shot_First\"\n])\n\nconditions = [\n  seen[\"Fav_Han_Solo\"] == \"Very unfavorably\",\n\n\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nEncoded = Encoded.assign(\n  \n)\n\ndef convert_YN(df,column):\n  conditions = [\n    df[column] == \"Yes\", \n    df[column] == \"No\",\n  ]\n\n  choices = [\n    1,0\n  ]\n\n  df[column] = np.select(conditions,choices, np.nan)\n  return df\n\n\nEncoded = convert_YN(Encoded, \"Fam_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Fan_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Star_Trek\")\nEncoded = convert_YN(Encoded, \"Seen_Any\")\nEncoded = convert_YN(Encoded, \"Is_Fan\")\nEncoded[\"Gender\"] = np.where(\nEncoded['Gender'] == \"Male\", 1, 0\n)\n\n\nEncoded.Location.value_counts(dropna = False)\nEncoded = pd.get_dummies(data = Encoded, columns=[\"Location\"])\n\ndf.head()\n\n\n\n```\n\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\nThe majority of respondants thought the Empire Strikes back was the best star wars movie.\n\n```{python}\n\nfrom lets_plot import *\nLetsPlot.setup_html()\n\n\nimport pandas as pd\n\nsummary = pd.DataFrame({\n    'Episode': [\n        'The Phantom Menace',\n        'Attack of the Clones',\n        'Revenge of the Sith',\n        'A New Hope',\n        'Empire Strikes Back',\n        'Return of the Jedi'\n    ],\n    'percentage': [10, 4, 6, 27, 36, 17]\n})\n\nfrom pandas.api.types import CategoricalDtype\nepisode_order = [\n    'The Phantom Menace',\n    'Attack of the Clones',\n    'Revenge of the Sith',\n    'A New Hope',\n    'Empire Strikes Back',\n    'Return of the Jedi'\n]\nsummary['Episode'] = summary['Episode'].astype(\n    CategoricalDtype(categories=episode_order, ordered=True)\n)\n\np = (\n    ggplot(summary, aes(x='Episode', y='percentage')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    coord_flip() +\n    geom_text(\n        aes(label=summary['percentage'].astype(str) + '%'),\n        ha='left',\n        nudge_y=1.5,\n        size=10\n    ) +\n    labs(\n        title=\"What's the Best ‘Star Wars’ Movie?\",\n        subtitle=\"Of 471 respondents who have seen all six films\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_text(size=12),\n        plot_title=element_text(size=16),\n        plot_subtitle=element_text(size=12),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n```\n\nMost people think that han solo shot first. Also a good amout of respondants were not sure what the question meant.\n\n```{python}\n\nfrom lets_plot import *\nimport pandas as pd\nfrom pandas.api.types import CategoricalDtype\n\nLetsPlot.setup_html()\n\nshot_cols = [\n    'Shot_First_Han',\n    'Shot_First_Greedo',\n    \"Shot_First_I don't understand this question\"\n]\n\n\nsummary = Encoded[shot_cols].sum().reset_index()\nsummary.columns = ['ResponseCode', 'Count']\n\n\ntotal_respondents = Encoded[shot_cols].any(axis=1).sum()\n\nsummary['Percent'] = round(summary['Count'] / total_respondents * 100, 0)\n\n\nsummary['PercentLabel'] = summary['Percent'].astype(int).astype(str) + '%'\n\n\nresponse_labels = {\n    'Shot_First_Han': 'Han',\n    'Shot_First_Greedo': 'Greedo',\n    \"Shot_First_I don't understand this question\": \"I don't understand\\n this question\"\n}\n\nsummary['Response'] = summary['ResponseCode'].map(response_labels)\n\ndesired_order = [\n    \"I don't understand\\n this question\",\n    'Greedo',\n    'Han'\n]\n\nresponse_cat_type = CategoricalDtype(categories=desired_order, ordered=True)\nsummary['Response'] = summary['Response'].astype(response_cat_type)\n\np = (\n    ggplot(summary, aes(y='Response', x='Percent')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    geom_text(\n        aes(label='PercentLabel'),\n        ha='left',\n        nudge_x=1.5,\n        size=9\n    ) +\n    labs(\n        title=\"Who Shot First?\",\n        subtitle=f\"According to {total_respondents} respondents\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_blank(),\n        axis_title_x=element_blank(),\n        axis_title_y=element_blank(),\n        axis_ticks=element_blank(),\n        plot_title=element_text(size=18),\n        plot_subtitle=element_text(size=13),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n\n\n```\n\n\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\nBased on the data in the table this learning model can predict respondants income with 67% accuracy\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n\n\n\n\n\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"self-contained":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","output-file":"project5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.27","theme":{"light":"flatly","dark":"darkly"},"title":"Client Report - [Insert Project Title]","subtitle":"Course DS 250","author":"[Tanner Hamblin]","page-layout":"full","title-block-banner":true,"toc-location":"body","code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{
  "hash": "8c991020543a7e505e420c04e5e05be1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Client Report - [Insert Project Title]\"\nsubtitle: \"Course DS 250\"\nauthor: \"[Tanner Hamblin]\"\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    title-block-banner: true\n    toc: true\n    toc-depth: 3\n    toc-location: body\n    number-sections: false\n    html-math-method: katex\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n        source: false\n        toggle: true\n        caption: See code\nexecute: \n  warning: false\n    \n---\n\n::: {#c33dd176 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \nimport numpy as np\nimport sqlite3\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n:::\n\n\n::: {#c4020b75 .cell execution_count=2}\n``` {.python .cell-code}\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\nsqlite_file = 'lahmansbaseballdb.sqlite'\n# this file must be in the same location as your .qmd or .py file\ncon = sqlite3.connect(sqlite_file)\n```\n:::\n\n\n## QUESTION|TASK 1\n\n__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  \n\nThe following table shows that there are 3 total baseball players records from BYUI ranging from the years 1997 to 2014. the three of them had a combined career length of 30 years and displays the salary for each year the following player played.\n\n::: {#f74d8dba .cell execution_count=3}\n``` {.python .cell-code}\n# %%\nsqlite_file = 'lahmansbaseballdb.sqlite'\ncon = sqlite3.connect(sqlite_file)\n\nq = '''\n    SELECT s.salary, s.playerID, c.schoolID, s.yearID, s.teamID\n    FROM salaries s\n    LEFT JOIN collegeplaying c\n    ON s.playerID = c.playerID\n    WHERE schoolID = 'idbyuid'\n    ORDER BY salary DESC\n    \n\n    \n'''\n\n\n' '\nresults = pd.read_sql_query(q,con)\n\ndisplay(results)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>salary</th>\n      <th>playerID</th>\n      <th>schoolID</th>\n      <th>yearID</th>\n      <th>teamID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4000000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2014</td>\n      <td>CHA</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4000000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2014</td>\n      <td>CHA</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3600000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2012</td>\n      <td>BAL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3600000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2012</td>\n      <td>BAL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2800000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2011</td>\n      <td>COL</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2800000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2011</td>\n      <td>COL</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2300000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2013</td>\n      <td>CHA</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2300000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2013</td>\n      <td>CHA</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1625000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2010</td>\n      <td>HOU</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1625000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2010</td>\n      <td>HOU</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1025000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2001</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1025000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2001</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>900000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2002</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>900000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2002</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>800000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2003</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>800000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2003</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>550000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2000</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>550000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>2000</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>410000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2009</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>410000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2009</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>395000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2008</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>395000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2008</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>380000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2007</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>380000.0</td>\n      <td>lindsma01</td>\n      <td>idbyuid</td>\n      <td>2007</td>\n      <td>FLO</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>215000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1999</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>215000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1999</td>\n      <td>SLN</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>185000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1998</td>\n      <td>PHI</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>185000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1998</td>\n      <td>PHI</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>150000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1997</td>\n      <td>PHI</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>150000.0</td>\n      <td>stephga01</td>\n      <td>idbyuid</td>\n      <td>1997</td>\n      <td>PHI</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## QUESTION|TASK 2\n\n__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  \n    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  \n    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  \n    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  \n\nThe following table displays the top 5 players with the highest batting average with at least one appearance at bat. This is not a very useful table because a player that batted twice and hit both times would have a perfect AB. It is more fair to make the limit higher for AB appearances.\n\n::: {#f3ccc9bf .cell execution_count=4}\n``` {.python .cell-code}\nq = ''' \nSelect playerID, yearID, CAST(H as Float) / CAST(AB as Float) as b\nFROM batting \nWHERE AB > 1\nORDER BY b DESC , playerID ASC \nLIMIT 5\n\n\n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results) \n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>playerID</th>\n      <th>yearID</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>aybarma01</td>\n      <td>2001</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>birasst01</td>\n      <td>1944</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>brideji01</td>\n      <td>1953</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>brownha01</td>\n      <td>1951</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>brownpe01</td>\n      <td>1894</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe Following Graph shows the same as the graph before but with more than 10 AB appearances. this is slightly more useful because it weeds out the people with lot AB appearances giving a more accurate representation of players that batted more than just a couple times. You notice the the batting percentage drops significantly.\n\n::: {#f60bdc94 .cell execution_count=5}\n``` {.python .cell-code}\nq = ''' \nSelect playerID, CAST(H as Float) / CAST(AB as Float) as b\nFROM batting \nWHERE AB > 10\nORDER BY b DESC , playerID ASC \nLIMIT 5\n\n\n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>playerID</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>nymanny01</td>\n      <td>0.642857</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>carsoma01</td>\n      <td>0.636364</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>silvech01</td>\n      <td>0.571429</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>puccige01</td>\n      <td>0.562500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>applepe01</td>\n      <td>0.545455</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis graph is the same as the prior with the stipulation that the player needs over 100 AB appearances. Similarly to the last one we see a relation that as we add a higher requirement of at bat appearances the bating average drops.\n\n::: {#7b590ce8 .cell execution_count=6}\n``` {.python .cell-code}\nq = ''' \nSelect playerID,AVG(CAST(H as Float) / CAST(AB as Float)) as b\nFROM batting \nWHERE AB > 100\nGROUP BY playerID\nORDER BY b DESC , playerID ASC \nLIMIT 5\n\n\n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>playerID</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>hazlebo01</td>\n      <td>0.402985</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>daviscu01</td>\n      <td>0.380952</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fishesh01</td>\n      <td>0.374016</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>woltery01</td>\n      <td>0.369565</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>barnero01</td>\n      <td>0.366576</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## QUESTION|TASK 3\n\n__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__\n\nThe following displays a graph comparing two teams: Boston Red Stockings and Chicago White Stockings win to loss ratio in the franchises history. We can see from the graph the the Boston Red Stockings historically have been a better team if you're basing it off strictly their Win Ratio.\n\n::: {#87d9d942 .cell execution_count=7}\n``` {.python .cell-code}\nq = '''\n    SELECT name, TeamID, AVG(CAST(W as float)/CAST(G as float)) as Win_Ratio\n    FROM teams\n    WHERE TeamID IN ('BS1','CH1')\n    GROUP BY name, TeamID\n    \n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n# Plot bar chart of Win_Ratio by Team\nggplot(results, aes(x='name', y='Win_Ratio')) + \\\n    geom_bar(stat = 'identity', width = .5) + \\\n    ggtitle('Historical Win Ratio Comparison') + \\\n    xlab('Team') + \\\n    ylab('Win Ratio')\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>teamID</th>\n      <th>Win_Ratio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Boston Red Stockings</td>\n      <td>BS1</td>\n      <td>0.754515</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chicago White Stockings</td>\n      <td>CH1</td>\n      <td>0.678571</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <style> html, body { margin: 0; padding: 0; } </style>\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"rQqJ5T\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   const forceImmediateRender = false;\n   const responsive = false;\n   \n   let sizing = {\n       width_mode: \"MIN\",\n       height_mode: \"SCALED\",\n       width: null, \n       height: null \n   };\n   \n   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n   if (preferredWidth !== undefined) {\n       sizing = {\n           width_mode: 'FIXED',\n           height_mode: 'SCALED',\n           width: parseFloat(preferredWidth)\n       };\n   }\n   \n   const containerDiv = document.getElementById(\"rQqJ5T\");\n   let fig = null;\n   \n   function renderPlot() {\n       if (fig === null) {\n           const plotSpec = {\n\"data\":{\n\"name\":[\"Boston Red Stockings\",\"Chicago White Stockings\"],\n\"Win_Ratio\":[0.7545151963446031,0.6785714285714286]\n},\n\"mapping\":{\n\"x\":\"name\",\n\"y\":\"Win_Ratio\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"name\"\n},{\n\"type\":\"str\",\n\"column\":\"teamID\"\n},{\n\"type\":\"float\",\n\"column\":\"Win_Ratio\"\n}]\n},\n\"ggtitle\":{\n\"text\":\"Historical Win Ratio Comparison\"\n},\n\"guides\":{\n\"x\":{\n\"title\":\"Team\"\n},\n\"y\":{\n\"title\":\"Win Ratio\"\n}\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"width\":0.5,\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"1\"\n};\n           fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing);\n       } else {\n           fig.updateView({});\n       }\n   }\n   \n   const renderImmediately = \n       forceImmediateRender || (\n           sizing.width_mode === 'FIXED' && \n           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n       );\n   \n   if (renderImmediately) {\n       renderPlot();\n   }\n   \n   if (!renderImmediately || responsive) {\n       // Set up observer for initial sizing or continuous monitoring\n       var observer = new ResizeObserver(function(entries) {\n           for (let entry of entries) {\n               if (entry.contentBoxSize && \n                   entry.contentBoxSize[0].inlineSize > 0) {\n                   if (!responsive && observer) {\n                       observer.disconnect();\n                       observer = null;\n                   }\n                   renderPlot();\n                   if (!responsive) {\n                       break;\n                   }\n               }\n           }\n       });\n       \n       observer.observe(containerDiv);\n   }\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Advanced Salary Distribution by Position (with Case Statement):__  \n\n    * Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. \n    \n        Include the following columns:\n\n        * position\n        * average_salary\n        * total_players\n        * highest_salary  \n\n    * The highest_salary column should display the highest salary ever earned by a player in that position. \n\n    * Additionally, create a new column called salary_category using a case statement:  \n\n        * If the average salary is above $3 million, categorize it as “High Salary.”\n        * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”\n        * Otherwise, categorize it as “Low Salary.”  \n\n    * Order the table by average salary in descending order.\n\n    **Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].\n\n\nFrom the following table we can see that in general the highest paid positions are 1st basemen making over 3 million. 2nd Basemen and Outfielders on average fall in the 2 - 3 million range. And all other positions fall in the low salary range. I thought this was interesting because everyone would assume the pitcher to be a high paying position. I think the data is skewed because if you notice the count pitcher has by far the highest. This lead me to think that there must be some low outliers dragging down average. One thing that could be done Add a having statement by position that filters out all players with lower than a certain threshold of salary.\n\n::: {#8abdfd59 .cell execution_count=8}\n``` {.python .cell-code}\nq = '''\n    SELECT  f.pos, f.G, ROUND(FORMAT(AVG(s.salary),2),2) as avg_salary, Count(*) as Count, \n    CASE \n        WHEN AVG(s.salary) > 3000000 THEN \"High Salary\"\n        WHEN AVG(s.salary) BETWEEN 2000000 AND 3000000 THEN \"Medium Salary\"\n        WHEN AVG(s.salary) < 2000000 THEN \"Low Salary\"\n        Else \"Make more Money\"\n    END as rank\n\n    From fielding f\n    JOIN(\n        SELECT yearID, playerID, MAX(G) as max_g\n        FROM fielding\n        GROUP BY yearID, playerID\n    ) mt\n    ON f.yearID = mt.yearID \n    AND f.playerID = mt.playerID \n    AND f.G = mt.max_g\n\n    JOIN salaries s\n    ON f.yearID = s.yearID\n    AND f.playerID = s.playerID\n    GROUP BY f.pos\n    \n    \n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>POS</th>\n      <th>G</th>\n      <th>avg_salary</th>\n      <th>Count</th>\n      <th>rank</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1B</td>\n      <td>109</td>\n      <td>3331718.39</td>\n      <td>1725</td>\n      <td>High Salary</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2B</td>\n      <td>54</td>\n      <td>1795006.55</td>\n      <td>1582</td>\n      <td>Low Salary</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3B</td>\n      <td>20</td>\n      <td>2306271.80</td>\n      <td>1619</td>\n      <td>Medium Salary</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C</td>\n      <td>12</td>\n      <td>1428857.75</td>\n      <td>2140</td>\n      <td>Low Salary</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OF</td>\n      <td>76</td>\n      <td>2389816.32</td>\n      <td>5185</td>\n      <td>Medium Salary</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>P</td>\n      <td>11</td>\n      <td>1939560.84</td>\n      <td>11876</td>\n      <td>Low Salary</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>SS</td>\n      <td>99</td>\n      <td>1973128.41</td>\n      <td>1474</td>\n      <td>Low Salary</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## STRETCH QUESTION|TASK 2\n\n__Advanced Career Longevity and Performance (with Subqueries):__\n\n    * Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: \n\n        * playerID\n        * first_name\n        * last_name\n        * career_length\n\n    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  \n\nThe Following Graph shows the Top 10 players with the longest careers based on the debut game and their last game played this shows Nick Altrock being the player with the longest career of 35 years.\n\n::: {#bed281d0 .cell execution_count=9}\n``` {.python .cell-code}\nq = ''' \n    SELECT p.playerID, p.nameFirst, p.nameLast, STRFTIME(\"%Y\",p.finalGame) - STRFTIME(\"%Y\", p.debut) as career_length\n    FROM people p\n    JOIN (SELECT playerID, SUM(G) as sg\n    FROM fielding\n    GROUP BY playerID \n    HAVING sg >= 10\n    ) st\n    ON p.playerID = st.playerID\n    ORDER BY career_length DESC\n    LIMIT 10\n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>playerID</th>\n      <th>nameFirst</th>\n      <th>nameLast</th>\n      <th>career_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>altroni01</td>\n      <td>Nick</td>\n      <td>Altrock</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>orourji01</td>\n      <td>Jim</td>\n      <td>O'Rourke</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>minosmi01</td>\n      <td>Minnie</td>\n      <td>Minoso</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>olearch01</td>\n      <td>Charley</td>\n      <td>O'Leary</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>lathaar01</td>\n      <td>Arlie</td>\n      <td>Latham</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>mcguide01</td>\n      <td>Deacon</td>\n      <td>McGuire</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>eversjo01</td>\n      <td>Johnny</td>\n      <td>Evers</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>jennihu01</td>\n      <td>Hughie</td>\n      <td>Jennings</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ryanno01</td>\n      <td>Nolan</td>\n      <td>Ryan</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>streega01</td>\n      <td>Gabby</td>\n      <td>Street</td>\n      <td>27</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis I found interesting because I did the same graph of the Top ten players with the longest career but this time based on their year ID. What was interesting is that between this and the last graph Nick Altrock and Arlie Latham are not on the list when compared by year ID. Why is this? My thought process is what if these two players were on the bench or still included on the roster when they were no longer playing. This is interesting to me because comparing two things that you would assume would return the same data have discrepencies.\n\n::: {#ea018122 .cell execution_count=10}\n``` {.python .cell-code}\nq = ''' \n    SELECT p.playerID, p.nameFirst, p.nameLast, may - miy as career_length\n    FROM people p\n    JOIN (SELECT playerID, SUM(G) as sg, MAX(yearID) as may, MIN(yearID) as miy\n    FROM fielding\n    GROUP BY playerID \n    HAVING sg >= 10\n    ) st\n    ON p.playerID = st.playerID\n    ORDER BY career_length DESC\n    LIMIT 10\n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>playerID</th>\n      <th>nameFirst</th>\n      <th>nameLast</th>\n      <th>career_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>orourji01</td>\n      <td>Jim</td>\n      <td>O'Rourke</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>altroni01</td>\n      <td>Nick</td>\n      <td>Altrock</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>lathaar01</td>\n      <td>Arlie</td>\n      <td>Latham</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>mcguide01</td>\n      <td>Deacon</td>\n      <td>McGuire</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>eversjo01</td>\n      <td>Johnny</td>\n      <td>Evers</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>jennihu01</td>\n      <td>Hughie</td>\n      <td>Jennings</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ryanno01</td>\n      <td>Nolan</td>\n      <td>Ryan</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>streega01</td>\n      <td>Gabby</td>\n      <td>Street</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ansonca01</td>\n      <td>Cap</td>\n      <td>Anson</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>johnto01</td>\n      <td>Tommy</td>\n      <td>John</td>\n      <td>26</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\n::: {#e61db892 .cell execution_count=11}\n``` {.python .cell-code}\nq = ''' \n    SELECT *\n    FROM batting\n    Limit 2\n    \n'''\nresults = pd.read_sql_query(q,con)\ndisplay(results)\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>playerID</th>\n      <th>yearID</th>\n      <th>stint</th>\n      <th>teamID</th>\n      <th>team_ID</th>\n      <th>lgID</th>\n      <th>G</th>\n      <th>G_batting</th>\n      <th>AB</th>\n      <th>...</th>\n      <th>RBI</th>\n      <th>SB</th>\n      <th>CS</th>\n      <th>BB</th>\n      <th>SO</th>\n      <th>IBB</th>\n      <th>HBP</th>\n      <th>SH</th>\n      <th>SF</th>\n      <th>GIDP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>abercda01</td>\n      <td>1871</td>\n      <td>1</td>\n      <td>TRO</td>\n      <td>8</td>\n      <td>NA</td>\n      <td>1</td>\n      <td>None</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>addybo01</td>\n      <td>1871</td>\n      <td>1</td>\n      <td>RC1</td>\n      <td>7</td>\n      <td>NA</td>\n      <td>25</td>\n      <td>None</td>\n      <td>118</td>\n      <td>...</td>\n      <td>13</td>\n      <td>8</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n---\n\n",
    "supporting": [
      "project2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
{
  "hash": "3ed16c2daaf8bf5507bc9c02547a3e22",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Client Report - [Insert Project Title]\"\nsubtitle: \"Course DS 250\"\nauthor: \"[Tanner Hamblin]\"\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    title-block-banner: true\n    toc: true\n    toc-depth: 3\n    toc-location: body\n    number-sections: false\n    html-math-method: katex\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n        source: false\n        toggle: true\n        caption: See code\nexecute: \n  warning: false\n    \n---\n\n::: {#560e2fea .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n# add the additional libraries you need to import for ML here\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n:::\n\n\nLoad data set \n\n::: {#b3d8de68 .cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv(\"StarWars.csv\", encoding='cp1252')\n\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RespondentID</th>\n      <th>Have you seen any of the 6 films in the Star Wars franchise?</th>\n      <th>Do you consider yourself to be a fan of the Star Wars film franchise?</th>\n      <th>Which of the following Star Wars films have you seen? Please select all that apply.</th>\n      <th>Unnamed: 4</th>\n      <th>Unnamed: 5</th>\n      <th>Unnamed: 6</th>\n      <th>Unnamed: 7</th>\n      <th>Unnamed: 8</th>\n      <th>Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.</th>\n      <th>...</th>\n      <th>Unnamed: 28</th>\n      <th>Which character shot first?</th>\n      <th>Are you familiar with the Expanded Universe?</th>\n      <th>Do you consider yourself to be a fan of the Expanded Universe?Œæ</th>\n      <th>Do you consider yourself to be a fan of the Star Trek franchise?</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Household Income</th>\n      <th>Education</th>\n      <th>Location (Census Region)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>...</td>\n      <td>Yoda</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n      <td>Response</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.292880e+09</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>3</td>\n      <td>...</td>\n      <td>Very favorably</td>\n      <td>I don't understand this question</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>NaN</td>\n      <td>High school degree</td>\n      <td>South Atlantic</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.292880e+09</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$0 - $24,999</td>\n      <td>Bachelor degree</td>\n      <td>West South Central</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.292765e+09</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>...</td>\n      <td>Unfamiliar (N/A)</td>\n      <td>I don't understand this question</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$0 - $24,999</td>\n      <td>High school degree</td>\n      <td>West North Central</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.292763e+09</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>5</td>\n      <td>...</td>\n      <td>Very favorably</td>\n      <td>I don't understand this question</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$100,000 - $149,999</td>\n      <td>Some college or Associate degree</td>\n      <td>West North Central</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 38 columns</p>\n</div>\n```\n:::\n:::\n\n\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\n_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\nThe machine learning shows that this data using star wars to predict customers salary is not very effective. only predicting each respondants income with 67% accuracy it is only a little more accurate than a coin flip. \n\n## Renaming Columns\n\nWe shortened and standardized all column names at once using direct assignment for clarity and ease of use.\n\n::: {#061edf1e .cell execution_count=3}\n``` {.python .cell-code}\n# Show original columns (uncomment to check)\n# df.columns.tolist()\n```\n:::\n\n\nRename all columns\n\n::: {#05d0b6c2 .cell execution_count=4}\n``` {.python .cell-code}\ndf.columns = [\n    'ID',\n    'Seen_Any',\n    'Is_Fan',\n    'Seen_Ep1',\n    'Seen_Ep2',\n    'Seen_Ep3',\n    'Seen_Ep4',\n    'Seen_Ep5',\n    'Seen_Ep6',\n    'Rank_Ep1',\n    'Rank_Ep2',\n    'Rank_Ep3',\n    'Rank_Ep4',\n    'Rank_Ep5',\n    'Rank_Ep6',\n    'Fav_Han_Solo',\n    'Fav_Luke_Skywalker',\n    'Fav_Princess_Leia',\n    'Fav_Anakin_Skywalker',\n    'Fav_Obi_Wan_Kenobi',\n    'Fav_Epmeror_Palpatine',\n    'Fav_Darth_Vader',\n    'Fav_Lando_Calrissian',\n    'Fav_Boba_Fett',\n    'Fav_C_3PO',\n    'Fav_R2_D2',\n    'Fav_Jar_Jar_Binks',\n    'Fav_Padme_Amidala',\n    'Fav_Yoda',\n    'Shot_First',\n    'Fam_Expanded_Universe',\n    'Fan_Expanded_Universe',\n    'Star_Trek',\n    'Gender',\n    'Age',\n    'Income',\n    'Education',\n    'Location'\n]\n\ndf.drop(\"ID\", axis=1, inplace = True)\ndf.drop(0, axis=0, inplace=True)\n\n```\n:::\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\nChanged all data types to either bool or int. this way I can use it in the machine learning.\n\n::: {#d7d833f2 .cell execution_count=5}\n``` {.python .cell-code}\nseen = df.query(\"Seen_Any == 'Yes'\")\ngraph = seen.copy()\nseen.head()\n\nseen.Age.value_counts(dropna=False)\n\n\nconditions = [\n  seen[\"Age\"] == \"18-29\",\n  seen[\"Age\"] == \"30-44\",\n  seen[\"Age\"] == \"45-60\",\n  seen[\"Age\"] == \"> 60\",\n\n]\n\nchoices = [\n  1,2,3,4\n]\n\nseen[\"Age\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nseen.Age.value_counts(dropna=False)\n\n\n\nconditions = [\n  seen[\"Education\"] == \"Less than high school degree\",\n  seen[\"Education\"] == \"High school degree\",\n  seen[\"Education\"] == \"Some college or Associate degree\",\n  seen[\"Education\"] == \"Bachelor degree\",\n  seen[\"Education\"] == \"Graduate degree\",\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Education\"] = np.select(conditions,choices,default=np.nan)\n\n\n\nconditions = [\n  seen[\"Income\"] == \"$0 - $24,999\",\n  seen[\"Income\"] == \"$25,000 - $49,999\",\n  seen[\"Income\"] == \"$50,000 - $99,999\",\n  seen[\"Income\"] == \"$100,000 - $149,999\",\n  seen[\"Income\"] == \"$150,000+\",\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nseen[\"Income\"] = np.select(conditions,choices,default=np.nan)\nseen = seen.dropna(subset=[\"Income\"])\n\nseen.Income.value_counts(dropna=False)\n\ny = seen[\"Income\"]\n\n\n\ny.value_counts(dropna=False)\ny.head()\n\n\nseen[\"Seen_Ep1\"].replace({\"Star Wars: Episode I  The Phantom Menace\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep2\"].replace({\"Star Wars: Episode II  Attack of the Clones\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep3\"].replace({\"Star Wars: Episode III  Revenge of the Sith\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep4\"].replace({\"Star Wars: Episode IV  A New Hope\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep5\"].replace({\"Star Wars: Episode V The Empire Strikes Back\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Seen_Ep6\"].replace({\"Star Wars: Episode VI Return of the Jedi\": 1,\nnp.nan: 0},inplace = True)\n\nseen[\"Rank_Ep1\"] = seen[\"Rank_Ep1\"].astype(float)\nseen[\"Rank_Ep2\"] = seen[\"Rank_Ep2\"].astype(float)\nseen[\"Rank_Ep3\"] = seen[\"Rank_Ep3\"].astype(float)\nseen[\"Rank_Ep4\"] = seen[\"Rank_Ep4\"].astype(float)\nseen[\"Rank_Ep5\"] = seen[\"Rank_Ep5\"].astype(float)\nseen[\"Rank_Ep6\"] = seen[\"Rank_Ep6\"].astype(float)\n\nseen.dropna(subset=[\"Rank_Ep1\", \"Rank_Ep2\", \"Rank_Ep3\", \"Rank_Ep4\", \"Rank_Ep5\", \"Rank_Ep6\"], inplace = True)\n\nseen.dropna(subset=[\"Location\"], inplace = True)\ndef assing_favorability(seen, column):\n\n\n  conditions = [\n    seen[column] == \"Very unfavorably\",\n    seen[column] == \"Somewhat unfavorably\",\n    seen[column] == \"Neither favorably nor unfavorably (neutral)\",\n    seen[column] == \"Somewhat favorably\",\n    seen[column] == \"Very favorably\",\n  ]\n  choices = [\n    1,2,3,4,5\n  ]\n  seen[column] = np.select(conditions, choices, np.nan)\n  return seen\n\n\n\nseen = assing_favorability(seen, \"Fav_Han_Solo\")\nseen = assing_favorability(seen, \"Fav_Luke_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Princess_Leia\")\nseen = assing_favorability(seen, \"Fav_Anakin_Skywalker\")\nseen = assing_favorability(seen, \"Fav_Obi_Wan_Kenobi\")\nseen = assing_favorability(seen, \"Fav_Epmeror_Palpatine\")\nseen = assing_favorability(seen, \"Fav_Darth_Vader\")\nseen = assing_favorability(seen, \"Fav_Lando_Calrissian\")\nseen = assing_favorability(seen, \"Fav_Boba_Fett\")\nseen = assing_favorability(seen, \"Fav_C_3PO\")\nseen = assing_favorability(seen, \"Fav_R2_D2\")\nseen = assing_favorability(seen, \"Fav_Jar_Jar_Binks\")\nseen = assing_favorability(seen, \"Fav_Padme_Amidala\")\nseen = assing_favorability(seen, \"Fav_Yoda\")\n\n\n\n\ndisplay(seen[\"Fam_Expanded_Universe\"].value_counts(dropna=False))\n\nEncoded = pd.get_dummies(seen, columns= [\n  \"Shot_First\"\n])\n\nconditions = [\n  seen[\"Fav_Han_Solo\"] == \"Very unfavorably\",\n\n\n\n\n\n]\n\nchoices = [\n  1,2,3,4,5\n]\n\nEncoded = Encoded.assign(\n  \n)\n\ndef convert_YN(df,column):\n  conditions = [\n    df[column] == \"Yes\", \n    df[column] == \"No\",\n  ]\n\n  choices = [\n    1,0\n  ]\n\n  df[column] = np.select(conditions,choices, np.nan)\n  return df\n\n\nEncoded = convert_YN(Encoded, \"Fam_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Fan_Expanded_Universe\")\nEncoded = convert_YN(Encoded, \"Star_Trek\")\nEncoded = convert_YN(Encoded, \"Seen_Any\")\nEncoded = convert_YN(Encoded, \"Is_Fan\")\nEncoded[\"Gender\"] = np.where(\nEncoded['Gender'] == \"Male\", 1, 0\n)\n\n\nEncoded.Location.value_counts(dropna = False)\nEncoded = pd.get_dummies(data = Encoded, columns=[\"Location\"])\n\ndf.head()\n\n```\n\n::: {.cell-output .cell-output-display}\n```\nFam_Expanded_Universe\nNo     495\nYes    176\nName: count, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Seen_Any</th>\n      <th>Is_Fan</th>\n      <th>Seen_Ep1</th>\n      <th>Seen_Ep2</th>\n      <th>Seen_Ep3</th>\n      <th>Seen_Ep4</th>\n      <th>Seen_Ep5</th>\n      <th>Seen_Ep6</th>\n      <th>Rank_Ep1</th>\n      <th>Rank_Ep2</th>\n      <th>...</th>\n      <th>Fav_Yoda</th>\n      <th>Shot_First</th>\n      <th>Fam_Expanded_Universe</th>\n      <th>Fan_Expanded_Universe</th>\n      <th>Star_Trek</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Income</th>\n      <th>Education</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>3</td>\n      <td>2</td>\n      <td>...</td>\n      <td>Very favorably</td>\n      <td>I don't understand this question</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>NaN</td>\n      <td>High school degree</td>\n      <td>South Atlantic</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$0 - $24,999</td>\n      <td>Bachelor degree</td>\n      <td>West South Central</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>...</td>\n      <td>Unfamiliar (N/A)</td>\n      <td>I don't understand this question</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$0 - $24,999</td>\n      <td>High school degree</td>\n      <td>West North Central</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>5</td>\n      <td>6</td>\n      <td>...</td>\n      <td>Very favorably</td>\n      <td>I don't understand this question</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$100,000 - $149,999</td>\n      <td>Some college or Associate degree</td>\n      <td>West North Central</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Star Wars: Episode I  The Phantom Menace</td>\n      <td>Star Wars: Episode II  Attack of the Clones</td>\n      <td>Star Wars: Episode III  Revenge of the Sith</td>\n      <td>Star Wars: Episode IV  A New Hope</td>\n      <td>Star Wars: Episode V The Empire Strikes Back</td>\n      <td>Star Wars: Episode VI Return of the Jedi</td>\n      <td>5</td>\n      <td>4</td>\n      <td>...</td>\n      <td>Somewhat favorably</td>\n      <td>Greedo</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>18-29</td>\n      <td>$100,000 - $149,999</td>\n      <td>Some college or Associate degree</td>\n      <td>West North Central</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 37 columns</p>\n</div>\n```\n:::\n:::\n\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\nThe majority of respondants thought the Empire Strikes back was the best star wars movie.\n\n::: {#2480afe3 .cell execution_count=6}\n``` {.python .cell-code}\nfrom lets_plot import *\nLetsPlot.setup_html()\n\n\nimport pandas as pd\n\nsummary = pd.DataFrame({\n    'Episode': [\n        'The Phantom Menace',\n        'Attack of the Clones',\n        'Revenge of the Sith',\n        'A New Hope',\n        'Empire Strikes Back',\n        'Return of the Jedi'\n    ],\n    'percentage': [10, 4, 6, 27, 36, 17]\n})\n\nfrom pandas.api.types import CategoricalDtype\nepisode_order = [\n    'The Phantom Menace',\n    'Attack of the Clones',\n    'Revenge of the Sith',\n    'A New Hope',\n    'Empire Strikes Back',\n    'Return of the Jedi'\n]\nsummary['Episode'] = summary['Episode'].astype(\n    CategoricalDtype(categories=episode_order, ordered=True)\n)\n\np = (\n    ggplot(summary, aes(x='Episode', y='percentage')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    coord_flip() +\n    geom_text(\n        aes(label=summary['percentage'].astype(str) + '%'),\n        ha='left',\n        nudge_y=1.5,\n        size=10\n    ) +\n    labs(\n        title=\"What's the Best ‘Star Wars’ Movie?\",\n        subtitle=\"Of 471 respondents who have seen all six films\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_text(size=12),\n        plot_title=element_text(size=16),\n        plot_subtitle=element_text(size=12),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"srI6D0\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"srI6D0\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"srI6D0\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n   <div id=\"GuDqRX\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   const forceImmediateRender = false;\n   const responsive = false;\n   \n   let sizing = {\n       width_mode: \"MIN\",\n       height_mode: \"SCALED\",\n       width: null, \n       height: null \n   };\n   \n   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n   if (preferredWidth !== undefined) {\n       sizing = {\n           width_mode: 'FIXED',\n           height_mode: 'SCALED',\n           width: parseFloat(preferredWidth)\n       };\n   }\n   \n   const containerDiv = document.getElementById(\"GuDqRX\");\n   let fig = null;\n   \n   function renderPlot() {\n       if (fig === null) {\n           const plotSpec = {\n\"data\":{\n\"Episode\":[\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sith\",\"A New Hope\",\"Empire Strikes Back\",\"Return of the Jedi\"],\n\"percentage\":[10.0,4.0,6.0,27.0,36.0,17.0]\n},\n\"mapping\":{\n\"x\":\"Episode\",\n\"y\":\"percentage\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"factor_levels\":[\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sith\",\"A New Hope\",\"Empire Strikes Back\",\"Return of the Jedi\"],\n\"column\":\"Episode\"\n},{\n\"type\":\"int\",\n\"column\":\"percentage\"\n}]\n},\n\"coord\":{\n\"name\":\"flip\",\n\"flip\":true\n},\n\"ggtitle\":{\n\"text\":\"What's the Best ‘Star Wars’ Movie?\",\n\"subtitle\":\"Of 471 respondents who have seen all six films\"\n},\n\"guides\":{\n\"x\":{\n\"title\":\"\"\n},\n\"y\":{\n\"title\":\"\"\n}\n},\n\"theme\":{\n\"name\":\"minimal\",\n\"axis_text_x\":{\n\"size\":12.0,\n\"blank\":false\n},\n\"axis_text_y\":{\n\"size\":12.0,\n\"blank\":false\n},\n\"panel_grid_major\":{\n\"blank\":true\n},\n\"panel_grid_minor\":{\n\"blank\":true\n},\n\"plot_title\":{\n\"size\":16.0,\n\"blank\":false\n},\n\"plot_subtitle\":{\n\"size\":12.0,\n\"blank\":false\n}\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"column\":\"Episode\",\n\"factor_levels\":[\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sith\",\"A New Hope\",\"Empire Strikes Back\",\"Return of the Jedi\"]\n}]\n},\n\"fill\":\"#1696d2\",\n\"data\":{\n}\n},{\n\"geom\":\"text\",\n\"mapping\":{\n\"label\":\"label\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"column\":\"label\",\n\"factor_levels\":[\"10%\",\"4%\",\"6%\",\"27%\",\"36%\",\"17%\"]\n},{\n\"column\":\"Episode\",\n\"factor_levels\":[\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sith\",\"A New Hope\",\"Empire Strikes Back\",\"Return of the Jedi\"]\n}]\n},\n\"nudge_y\":1.5,\n\"ha\":\"left\",\n\"size\":10.0,\n\"data\":{\n\"label\":[\"10%\",\"4%\",\"6%\",\"27%\",\"36%\",\"17%\"]\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"1\"\n};\n           window.letsPlotCall(function() { fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing); });\n       } else {\n           fig.updateView({});\n       }\n   }\n   \n   const renderImmediately = \n       forceImmediateRender || (\n           sizing.width_mode === 'FIXED' && \n           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n       );\n   \n   if (renderImmediately) {\n       renderPlot();\n   }\n   \n   if (!renderImmediately || responsive) {\n       // Set up observer for initial sizing or continuous monitoring\n       var observer = new ResizeObserver(function(entries) {\n           for (let entry of entries) {\n               if (entry.contentBoxSize && \n                   entry.contentBoxSize[0].inlineSize > 0) {\n                   if (!responsive && observer) {\n                       observer.disconnect();\n                       observer = null;\n                   }\n                   renderPlot();\n                   if (!responsive) {\n                       break;\n                   }\n               }\n           }\n       });\n       \n       observer.observe(containerDiv);\n   }\n   \n   // ----------\n   })();\n   \n   </script>\n```\n:::\n:::\n\n\nMost people think that han solo shot first. Also a good amout of respondants were not sure what the question meant.\n\n::: {#c4fed212 .cell execution_count=7}\n``` {.python .cell-code}\nfrom lets_plot import *\nimport pandas as pd\nfrom pandas.api.types import CategoricalDtype\n\nLetsPlot.setup_html()\n\nshot_cols = [\n    'Shot_First_Han',\n    'Shot_First_Greedo',\n    \"Shot_First_I don't understand this question\"\n]\n\n\nsummary = Encoded[shot_cols].sum().reset_index()\nsummary.columns = ['ResponseCode', 'Count']\n\n\ntotal_respondents = Encoded[shot_cols].any(axis=1).sum()\n\nsummary['Percent'] = round(summary['Count'] / total_respondents * 100, 0)\n\n\nsummary['PercentLabel'] = summary['Percent'].astype(int).astype(str) + '%'\n\n\nresponse_labels = {\n    'Shot_First_Han': 'Han',\n    'Shot_First_Greedo': 'Greedo',\n    \"Shot_First_I don't understand this question\": \"I don't understand\\n this question\"\n}\n\nsummary['Response'] = summary['ResponseCode'].map(response_labels)\n\ndesired_order = [\n    \"I don't understand\\n this question\",\n    'Greedo',\n    'Han'\n]\n\nresponse_cat_type = CategoricalDtype(categories=desired_order, ordered=True)\nsummary['Response'] = summary['Response'].astype(response_cat_type)\n\np = (\n    ggplot(summary, aes(y='Response', x='Percent')) +\n    geom_bar(stat='identity', fill='#1696d2') +\n    geom_text(\n        aes(label='PercentLabel'),\n        ha='left',\n        nudge_x=1.5,\n        size=9\n    ) +\n    labs(\n        title=\"Who Shot First?\",\n        subtitle=f\"According to {total_respondents} respondents\",\n        x='',\n        y=''\n    ) +\n    theme_minimal() +\n    theme(\n        axis_text_y=element_text(size=12),\n        axis_text_x=element_blank(),\n        axis_title_x=element_blank(),\n        axis_title_y=element_blank(),\n        axis_ticks=element_blank(),\n        plot_title=element_text(size=18),\n        plot_subtitle=element_text(size=13),\n        panel_grid_major=element_blank(),\n        panel_grid_minor=element_blank()\n    )\n)\np\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"uu2gRS\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"uu2gRS\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"uu2gRS\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n   <div id=\"TclqdY\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   const forceImmediateRender = false;\n   const responsive = false;\n   \n   let sizing = {\n       width_mode: \"MIN\",\n       height_mode: \"SCALED\",\n       width: null, \n       height: null \n   };\n   \n   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n   if (preferredWidth !== undefined) {\n       sizing = {\n           width_mode: 'FIXED',\n           height_mode: 'SCALED',\n           width: parseFloat(preferredWidth)\n       };\n   }\n   \n   const containerDiv = document.getElementById(\"TclqdY\");\n   let fig = null;\n   \n   function renderPlot() {\n       if (fig === null) {\n           const plotSpec = {\n\"data\":{\n\"Percent\":[39.0,24.0,38.0],\n\"PercentLabel\":[\"39%\",\"24%\",\"38%\"],\n\"Response\":[\"Han\",\"Greedo\",\"I don't understand\\n this question\"]\n},\n\"mapping\":{\n\"x\":\"Percent\",\n\"y\":\"Response\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"ResponseCode\"\n},{\n\"type\":\"int\",\n\"column\":\"Count\"\n},{\n\"type\":\"float\",\n\"column\":\"Percent\"\n},{\n\"type\":\"str\",\n\"column\":\"PercentLabel\"\n},{\n\"type\":\"str\",\n\"factor_levels\":[\"I don't understand\\n this question\",\"Greedo\",\"Han\"],\n\"column\":\"Response\"\n}]\n},\n\"ggtitle\":{\n\"text\":\"Who Shot First?\",\n\"subtitle\":\"According to 671 respondents\"\n},\n\"guides\":{\n\"x\":{\n\"title\":\"\"\n},\n\"y\":{\n\"title\":\"\"\n}\n},\n\"theme\":{\n\"name\":\"minimal\",\n\"axis_title_x\":{\n\"blank\":true\n},\n\"axis_title_y\":{\n\"blank\":true\n},\n\"axis_text_x\":{\n\"blank\":true\n},\n\"axis_text_y\":{\n\"size\":12.0,\n\"blank\":false\n},\n\"axis_ticks\":{\n\"blank\":true\n},\n\"panel_grid_major\":{\n\"blank\":true\n},\n\"panel_grid_minor\":{\n\"blank\":true\n},\n\"plot_title\":{\n\"size\":18.0,\n\"blank\":false\n},\n\"plot_subtitle\":{\n\"size\":13.0,\n\"blank\":false\n}\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"column\":\"Response\",\n\"factor_levels\":[\"I don't understand\\n this question\",\"Greedo\",\"Han\"]\n}]\n},\n\"fill\":\"#1696d2\",\n\"orientation\":\"y\",\n\"data\":{\n}\n},{\n\"geom\":\"text\",\n\"mapping\":{\n\"label\":\"PercentLabel\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"column\":\"Response\",\n\"factor_levels\":[\"I don't understand\\n this question\",\"Greedo\",\"Han\"]\n}]\n},\n\"nudge_x\":1.5,\n\"ha\":\"left\",\n\"size\":9.0,\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"2\"\n};\n           window.letsPlotCall(function() { fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing); });\n       } else {\n           fig.updateView({});\n       }\n   }\n   \n   const renderImmediately = \n       forceImmediateRender || (\n           sizing.width_mode === 'FIXED' && \n           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n       );\n   \n   if (renderImmediately) {\n       renderPlot();\n   }\n   \n   if (!renderImmediately || responsive) {\n       // Set up observer for initial sizing or continuous monitoring\n       var observer = new ResizeObserver(function(entries) {\n           for (let entry of entries) {\n               if (entry.contentBoxSize && \n                   entry.contentBoxSize[0].inlineSize > 0) {\n                   if (!responsive && observer) {\n                       observer.disconnect();\n                       observer = null;\n                   }\n                   renderPlot();\n                   if (!responsive) {\n                       break;\n                   }\n               }\n           }\n       });\n       \n       observer.observe(containerDiv);\n   }\n   \n   // ----------\n   })();\n   \n   </script>\n```\n:::\n:::\n\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\nBased on the data in the table this learning model can predict respondants income with 67% accuracy\n\n::: {#8c2397a5 .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.674074074074074\n```\n:::\n:::\n\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n::: {#c6338284 .cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\nEncoded['Income_over_50k'] = (Encoded['Income'] > 3).astype(int)\n\nX = Encoded.drop(columns=['Income', 'Income_over_50k'])\ny = Encoded['Income_over_50k']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint(accuracy)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.674074074074074\n```\n:::\n:::\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n::: {#06fda51e .cell execution_count=10}\n``` {.python .cell-code}\n# Include and execute your code here\n\n```\n:::\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n::: {#17b71ee7 .cell execution_count=11}\n``` {.python .cell-code}\n# Include and execute your code here\n\n```\n:::\n\n\n---\n\n",
    "supporting": [
      "project5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}